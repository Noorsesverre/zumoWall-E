//Libraries
#include <ZumoMotors.h>
#include <Pushbutton.h>
#include <QTRSensors.h>
#include <ZumoReflectanceSensorArray.h>
#include <NewPing.h>
#include <PLab_ZumoMotors.h>
 
//QTR greier
#define QTR_THRESHOLD  200
#define NUM_SENSORS 6
unsigned int sensor_values[NUM_SENSORS];
ZumoReflectanceSensorArray sensors;
  
//Farter og turn durations
#define REVERSE_SPEED     400 // 0 is stopped, 400 is full speed
#define TURN_SPEED        400
#define FORWARD_SPEED     400
#define REVERSE_DURATION  200 // ms
#define TURN_DURATION     150 // ms

//Definerer motorene
ZumoMotors motors;
PLab_ZumoMotors plab_Motors;
 
//Variabler som blir brukt til å bestemme oppførsel
unsigned long time = 0;
int x = 0;

//Sonar-ting
const int triggerPin = A5;
const int maxDistance = 50;
NewPing sonar(triggerPin, echoPin, maxDistance);

//Definer på-knappen
Pushbutton button(ZUMO_BUTTON); 

void setup() {
   sensors.init(); //Initialiserer QTR sensorer
   button.waitForButton(); // start when button pressed
}

void turn(boolean left) {   
  time = millis();
      
  //Kjører litt bakover
  motors.setSpeeds(-REVERSE_SPEED, -REVERSE_SPEED);
  delay(REVERSE_DURATION);

  //Svinger enten til venstre eller høyre
  if (left) {
    motors.setSpeeds(TURN_SPEED, -TURN_SPEED);
  } else {
    motors.setSpeeds(-TURN_SPEED, TURN_SPEED);
  }
  delay(TURN_DURATION*x);

  motors.setSpeeds(FORWARD_SPEED, FORWARD_SPEED); //Kjører framover
}

float sonarDistance() {
  // Gjør ett ping, og beregn avstanden
  unsigned int time = sonar.ping();
  float distance = sonar.convert_cm(time);
  if (distance == 0.0) { // sonar gives zero when outside range
    // Turn off LED and just go forward
    digitalWrite(LED,LOW); 
  } else {
    digitalWrite(LED,HIGH);
  }
   return distance;
}

void loop() {
  x = random(1,2);
  sensors.read(sensor_values);

  int distance = sonarDistance();
  
  if (sensor_values[0] < QTR_THRESHOLD || sensor_values[1] < QTR_THRESHOLD)
  {
    turn(true); 
  }
  else if (sensor_values[5] < QTR_THRESHOLD || sensor_values[4] < QTR_THRESHOLD)
  {
    turn(false); 
  }
  else if (distance > 0) {
     if (degreesServo > 90) {
        plab_Motors.turnLeft(200,degreesServo-90);
        motors.setSpeeds(FORWARD_SPEED, FORWARD_SPEED);
     } else if (degreesServo < 90) {
       plab_Motors.turnRight(200,90-degreesServo);
       motors.setSpeeds(FORWARD_SPEED, FORWARD_SPEED);
     };
  }
  else
  {   
    if (millis() > time + 750) {
       motors.setSpeeds(FORWARD_SPEED/2, FORWARD_SPEED/2);
    } else {
       motors.setSpeeds(FORWARD_SPEED, FORWARD_SPEED);
    }   
  }
}
